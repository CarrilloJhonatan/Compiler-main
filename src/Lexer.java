// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\0\1\6\1\7\1\10\1\0\1\11\1\0\1\12"+
    "\1\13\1\14\1\0\1\15\1\0\1\16\1\17\1\20"+
    "\11\21\1\0\1\22\1\0\1\23\3\0\1\24\1\25"+
    "\1\26\1\24\1\27\7\24\1\30\1\31\1\32\1\33"+
    "\1\24\1\34\1\24\1\35\6\24\4\0\1\24\1\0"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\24\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\24\1\62\1\24"+
    "\1\63\1\64\1\65\1\66\7\0\1\3\73\0\1\24"+
    "\7\0\1\24\3\0\1\24\3\0\1\24\1\0\1\24"+
    "\6\0\1\24\1\0\1\24\4\0\1\24\7\0\1\24"+
    "\3\0\1\24\3\0\1\24\1\0\1\24\6\0\1\24"+
    "\1\0\1\24\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\1\4\1\5\1\6"+
    "\1\1\2\7\1\10\1\11\17\12\1\13\1\14\1\0"+
    "\1\15\1\0\1\16\1\0\1\2\1\0\2\17\21\12"+
    "\1\20\3\12\3\0\2\21\23\12\1\22\2\12\2\0"+
    "\1\2\16\12\1\23\1\12\1\20\2\12\1\0\5\12"+
    "\1\24\4\12\1\25\2\12\1\0\7\12\1\26\1\12"+
    "\1\27\1\30\2\12\1\22\4\12\1\31\2\0\4\12"+
    "\4\0\7\12\4\0\10\12\4\0\5\12\1\32\1\12"+
    "\1\0\1\33\2\0\6\12\1\34\1\35\1\12\1\36"+
    "\5\12\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\u0113\0\67"+
    "\0\67\0\67\0\67\0\u014a\0\u0181\0\u01b8\0\67\0\67"+
    "\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370"+
    "\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\67"+
    "\0\67\0\245\0\245\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\67\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\67\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u01ef"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u0b2c\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u01ef\0\u13c4\0\u01ef\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u01ef\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u01ef\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u01ef\0\u18b5"+
    "\0\u01ef\0\67\0\u18ec\0\u1923\0\u1810\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\u01ef\0\u2297\0\u22ce\0\67\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\67\0\u01ef\0\u24bd\0\u01ef"+
    "\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\2\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\21\1\23\5\21"+
    "\1\24\1\21\1\25\1\26\1\27\1\30\2\21\1\31"+
    "\3\21\1\32\1\33\1\34\1\21\1\35\1\36\1\37"+
    "\3\21\1\40\1\10\1\41\71\0\1\3\64\0\2\42"+
    "\1\0\1\42\1\0\1\42\1\43\60\42\5\0\1\44"+
    "\12\0\2\44\2\0\40\44\1\0\1\44\25\0\40\45"+
    "\17\0\1\46\2\0\1\47\65\0\1\50\1\0\1\51"+
    "\1\52\63\0\1\50\1\0\2\16\65\0\2\21\2\0"+
    "\40\21\23\0\2\21\2\0\12\21\1\53\25\21\23\0"+
    "\2\21\2\0\16\21\1\54\21\21\23\0\2\21\2\0"+
    "\15\21\1\55\16\21\1\56\3\21\23\0\2\21\2\0"+
    "\27\21\1\57\10\21\23\0\2\21\2\0\16\21\1\60"+
    "\21\21\23\0\2\21\2\0\26\21\1\61\4\21\1\62"+
    "\4\21\23\0\2\21\2\0\22\21\1\63\7\21\1\64"+
    "\5\21\23\0\2\21\2\0\26\21\1\65\10\21\1\66"+
    "\23\0\2\21\2\0\27\21\1\67\10\21\23\0\2\21"+
    "\2\0\16\21\1\70\21\21\23\0\2\21\2\0\22\21"+
    "\1\71\4\21\1\72\10\21\23\0\2\21\2\0\16\21"+
    "\1\73\21\21\23\0\2\21\2\0\22\21\1\74\12\21"+
    "\1\75\2\21\23\0\2\21\2\0\16\21\1\76\10\21"+
    "\1\77\10\21\10\0\1\100\12\0\2\100\2\0\40\100"+
    "\1\0\1\100\21\0\2\45\2\0\40\45\3\0\14\101"+
    "\1\102\52\101\2\47\1\3\1\47\1\4\62\47\20\0"+
    "\1\103\1\104\65\0\2\52\65\0\2\21\2\0\30\21"+
    "\1\105\7\21\23\0\2\21\2\0\26\21\1\106\11\21"+
    "\23\0\2\21\2\0\16\21\1\107\21\21\23\0\2\21"+
    "\2\0\32\21\1\110\5\21\23\0\2\21\2\0\24\21"+
    "\1\111\13\21\23\0\2\21\2\0\32\21\1\112\1\21"+
    "\1\113\3\21\23\0\2\21\2\0\34\21\1\114\3\21"+
    "\23\0\2\21\2\0\34\21\1\115\3\21\23\0\2\21"+
    "\2\0\26\21\1\116\11\21\23\0\2\21\2\0\16\21"+
    "\1\117\21\21\23\0\2\21\2\0\34\21\1\120\3\21"+
    "\23\0\2\21\2\0\31\21\1\121\6\21\23\0\2\21"+
    "\2\0\32\21\1\62\5\21\23\0\2\21\2\0\33\21"+
    "\1\62\4\21\23\0\2\21\2\0\26\21\1\122\11\21"+
    "\23\0\2\21\2\0\26\21\1\123\11\21\23\0\2\21"+
    "\2\0\12\21\1\124\15\21\1\125\7\21\23\0\2\21"+
    "\2\0\26\21\1\126\11\21\23\0\2\21\2\0\16\21"+
    "\1\127\13\21\1\130\5\21\23\0\2\21\2\0\36\21"+
    "\1\131\1\21\23\0\2\21\2\0\25\21\1\132\12\21"+
    "\10\0\1\133\12\0\2\133\2\0\40\133\1\0\1\133"+
    "\1\0\14\101\1\134\66\101\1\134\2\101\1\135\47\101"+
    "\20\0\2\104\65\0\2\21\2\0\34\21\1\136\3\21"+
    "\23\0\2\21\2\0\33\21\1\137\4\21\23\0\2\21"+
    "\2\0\24\21\1\140\13\21\23\0\2\21\2\0\12\21"+
    "\1\141\25\21\23\0\2\21\2\0\27\21\1\142\10\21"+
    "\23\0\2\21\2\0\16\21\1\143\21\21\23\0\2\21"+
    "\2\0\16\21\1\144\21\21\23\0\2\21\2\0\16\21"+
    "\1\145\21\21\23\0\2\21\2\0\16\21\1\130\21\21"+
    "\23\0\2\21\2\0\12\21\1\146\25\21\23\0\2\21"+
    "\2\0\26\21\1\147\11\21\23\0\2\21\2\0\16\21"+
    "\1\150\21\21\23\0\2\21\2\0\35\21\1\151\2\21"+
    "\23\0\2\21\2\0\34\21\1\152\3\21\23\0\2\21"+
    "\2\0\16\21\1\153\21\21\23\0\2\21\2\0\24\21"+
    "\1\154\13\21\23\0\2\21\2\0\16\21\1\155\21\21"+
    "\23\0\2\21\2\0\27\21\1\156\10\21\23\0\2\21"+
    "\2\0\32\21\1\157\5\21\23\0\2\21\2\0\34\21"+
    "\1\160\3\21\23\0\2\21\2\0\12\21\1\153\25\21"+
    "\10\0\1\161\12\0\2\161\2\0\40\161\1\0\1\161"+
    "\1\0\14\101\1\134\2\101\1\3\47\101\20\0\2\21"+
    "\2\0\35\21\1\162\2\21\23\0\2\21\2\0\12\21"+
    "\1\163\25\21\23\0\2\21\2\0\12\21\1\164\25\21"+
    "\23\0\2\21\2\0\33\21\1\130\4\21\23\0\2\21"+
    "\2\0\32\21\1\154\5\21\23\0\2\21\2\0\14\21"+
    "\1\165\23\21\23\0\2\21\2\0\26\21\1\166\11\21"+
    "\23\0\2\21\2\0\32\21\1\160\5\21\23\0\2\21"+
    "\2\0\24\21\1\167\13\21\23\0\2\21\2\0\34\21"+
    "\1\170\3\21\23\0\2\21\2\0\32\21\1\171\5\21"+
    "\23\0\2\21\2\0\22\21\1\172\15\21\23\0\2\21"+
    "\2\0\12\21\1\173\25\21\23\0\2\21\2\0\32\21"+
    "\1\174\5\21\23\0\2\21\2\0\34\21\1\175\3\21"+
    "\23\0\2\21\2\0\34\21\1\176\3\21\23\0\2\21"+
    "\2\0\27\21\1\154\10\21\10\0\1\177\12\0\2\177"+
    "\2\0\40\177\1\0\1\177\21\0\2\21\2\0\32\21"+
    "\1\200\5\21\23\0\2\21\2\0\23\21\1\201\14\21"+
    "\23\0\2\21\2\0\26\21\1\62\11\21\23\0\2\21"+
    "\2\0\21\21\1\202\16\21\23\0\2\21\2\0\16\21"+
    "\1\203\21\21\23\0\2\21\2\0\16\21\1\204\21\21"+
    "\23\0\2\21\2\0\32\21\1\205\5\21\23\0\2\21"+
    "\2\0\16\21\1\206\21\21\23\0\2\21\2\0\32\21"+
    "\1\207\5\21\23\0\2\21\2\0\22\21\1\210\15\21"+
    "\23\0\2\21\2\0\16\21\1\211\21\21\10\0\1\212"+
    "\12\0\2\212\2\0\40\212\1\0\1\212\21\0\2\21"+
    "\2\0\12\21\1\213\25\21\23\0\2\21\2\0\16\21"+
    "\1\214\21\21\23\0\2\21\2\0\12\21\1\215\25\21"+
    "\23\0\2\21\2\0\32\21\1\216\5\21\23\0\2\21"+
    "\2\0\3\21\1\217\34\21\23\0\2\21\2\0\35\21"+
    "\1\220\2\21\23\0\2\21\2\0\32\21\1\221\5\21"+
    "\23\0\2\21\2\0\32\21\1\222\5\21\21\0\1\223"+
    "\1\0\2\21\2\0\40\21\21\0\1\224\1\0\2\21"+
    "\2\0\40\21\23\0\2\21\2\0\7\21\1\225\30\21"+
    "\23\0\2\21\2\0\33\21\1\226\4\21\23\0\2\21"+
    "\2\0\25\21\1\227\12\21\23\0\2\21\2\0\15\21"+
    "\1\202\22\21\23\0\2\21\2\0\4\21\1\230\33\21"+
    "\32\0\1\231\4\0\1\232\1\233\66\0\1\234\51\0"+
    "\2\21\2\0\22\21\1\235\15\21\23\0\2\21\2\0"+
    "\1\21\1\236\1\237\2\21\1\240\1\241\31\21\23\0"+
    "\2\21\2\0\30\21\1\242\7\21\23\0\2\21\2\0"+
    "\22\21\1\243\15\21\55\0\1\244\56\0\1\245\66\0"+
    "\1\246\66\0\1\247\44\0\2\21\2\0\26\21\1\250"+
    "\11\21\23\0\2\21\2\0\12\21\1\251\11\21\1\252"+
    "\13\21\23\0\2\21\2\0\24\21\1\253\13\21\23\0"+
    "\2\21\2\0\16\21\1\254\21\21\23\0\2\21\2\0"+
    "\13\21\1\255\24\21\23\0\2\21\2\0\22\21\1\256"+
    "\15\21\23\0\2\21\2\0\16\21\1\257\21\21\63\0"+
    "\1\260\44\0\1\261\112\0\1\262\66\0\1\263\24\0"+
    "\2\21\2\0\34\21\1\264\3\21\23\0\2\21\2\0"+
    "\24\21\1\265\13\21\23\0\2\21\2\0\12\21\1\266"+
    "\25\21\23\0\2\21\2\0\12\21\1\267\25\21\23\0"+
    "\2\21\2\0\20\21\1\267\17\21\23\0\2\21\2\0"+
    "\33\21\1\270\4\21\23\0\2\21\2\0\32\21\1\271"+
    "\5\21\23\0\2\21\2\0\26\21\1\272\11\21\45\0"+
    "\1\273\74\0\1\274\76\0\1\275\66\0\1\276\26\0"+
    "\2\21\2\0\12\21\1\277\25\21\23\0\2\21\2\0"+
    "\22\21\1\300\15\21\23\0\2\21\2\0\26\21\1\301"+
    "\11\21\23\0\2\21\2\0\32\21\1\302\5\21\23\0"+
    "\2\21\2\0\34\21\1\303\3\21\23\0\2\21\2\0"+
    "\34\21\1\304\3\21\61\0\1\275\63\0\1\274\66\0"+
    "\1\305\33\0\2\21\2\0\32\21\1\306\5\21\23\0"+
    "\2\21\2\0\37\21\1\307\23\0\2\21\2\0\14\21"+
    "\1\302\23\21\23\0\2\21\2\0\27\21\1\310\10\21"+
    "\23\0\2\21\2\0\12\21\1\311\25\21\23\0\2\21"+
    "\2\0\32\21\1\312\5\21\23\0\2\21\2\0\12\21"+
    "\1\310\25\21\23\0\2\21\2\0\14\21\1\313\23\21"+
    "\23\0\2\21\2\0\12\21\1\314\25\21\23\0\2\21"+
    "\2\0\35\21\1\315\2\21\23\0\2\21\2\0\33\21"+
    "\1\316\4\21\23\0\2\21\2\0\24\21\1\302\13\21"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\4\11\3\1\2\11\17\1\2\11"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\26\1\3\0\1\11\27\1\2\0\24\1\1\0\15\1"+
    "\1\0\12\1\1\11\10\1\2\0\4\1\4\0\7\1"+
    "\4\0\10\1\4\0\7\1\1\0\1\11\2\0\6\1"+
    "\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 32: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 4:
            { return token(yytext(), "PARENTESIS_A", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 5:
            { return token(yytext(), "PARENTESIS_C", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 6:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 7:
            { return token(yytext(), "ENTERO", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 8:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 9:
            { return token(yytext(), "OP_ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 10:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 11:
            { return token(yytext(), "LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 12:
            { return token(yytext(), "LLAVE_C", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 13:
            { return token(yytext(), "TEXTO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 14:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 15:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 16:
            { return token(yytext(), "CONDICIONAL_SI", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 17:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 18:
            { return token(yytext(), "MOVIMIENTO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 19:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 20:
            { return token(yytext(), "FINAL", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 21:
            { return token(yytext(), "TOMAR", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 22:
            { return token(yytext(), "PINTAR", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 23:
            { return token(yytext(), "SUERTE", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 24:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 25:
            { return token(yytext(), "REPETIR", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 26:
            { return token(yytext(), "INTERRUMPIR", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 27:
            { return token(yytext(), "CAPTURA_TIPODATO", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 28:
            { return token(yytext(), "MENSAJE_TEXTO", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 29:
            { return token(yytext(), "DETENER_PINTAR", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 30:
            { return token(yytext(), "VER", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
